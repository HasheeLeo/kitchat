{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n\n  exports.stringToBytes = function (string) {\n    return _toConsumableArray(string).map(function (character) {\n      return character.charCodeAt(0);\n    });\n  };\n\n  var uint8ArrayUtf8ByteString = function uint8ArrayUtf8ByteString(array, start, end) {\n    return String.fromCharCode.apply(String, _toConsumableArray(array.slice(start, end)));\n  };\n\n  exports.readUInt64LE = function (buffer) {\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var n = buffer[offset];\n    var mul = 1;\n    var i = 0;\n\n    while (++i < 8) {\n      mul *= 0x100;\n      n += buffer[offset + i] * mul;\n    }\n\n    return n;\n  };\n\n  exports.tarHeaderChecksumMatches = function (buffer) {\n    if (buffer.length < 512) {\n      return false;\n    }\n\n    var MASK_8TH_BIT = 0x80;\n    var sum = 256;\n    var signedBitSum = 0;\n\n    for (var i = 0; i < 148; i++) {\n      var byte = buffer[i];\n      sum += byte;\n      signedBitSum += byte & MASK_8TH_BIT;\n    }\n\n    for (var _i = 156; _i < 512; _i++) {\n      var _byte = buffer[_i];\n      sum += _byte;\n      signedBitSum += _byte & MASK_8TH_BIT;\n    }\n\n    var readSum = parseInt(uint8ArrayUtf8ByteString(buffer, 148, 154), 8);\n    return readSum === sum || readSum === sum - (signedBitSum << 1);\n  };\n\n  exports.multiByteIndexOf = function (buffer, bytesToSearch) {\n    var startAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    if (Buffer && Buffer.isBuffer(buffer)) {\n      return buffer.indexOf(Buffer.from(bytesToSearch), startAt);\n    }\n\n    var nextBytesMatch = function nextBytesMatch(buffer, bytes, startIndex) {\n      for (var i = 1; i < bytes.length; i++) {\n        if (bytes[i] !== buffer[startIndex + i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    var index = buffer.indexOf(bytesToSearch[0], startAt);\n\n    while (index >= 0) {\n      if (nextBytesMatch(buffer, bytesToSearch, index)) {\n        return index;\n      }\n\n      index = buffer.indexOf(bytesToSearch[0], index + 1);\n    }\n\n    return -1;\n  };\n\n  exports.uint8ArrayUtf8ByteString = uint8ArrayUtf8ByteString;\n});","lineCount":86,"map":[[2,0,1,0],[6,0,3,0,"exports"],[6,2,3,0,"exports"],[6,9,3,7],[6,10,3,8,"stringToBytes"],[6,23,3,0],[6,26,3,24],[6,36,3,24,"string"],[6,42,3,30],[7,0,3,30],[7,11,3,34],[7,30,3,38,"string"],[7,36,3,34],[7,38,3,46,"map"],[7,41,3,34],[7,42,3,50],[7,52,3,50,"character"],[7,61,3,59],[8,0,3,59],[8,13,3,63,"character"],[8,22,3,72],[8,23,3,73,"charCodeAt"],[8,33,3,63],[8,34,3,84],[8,35,3,63],[8,36,3,59],[9,0,3,59],[9,5,3,34],[9,6,3,30],[10,0,3,30],[10,3,3,0],[12,0,5,0],[12,6,5,6,"uint8ArrayUtf8ByteString"],[12,30,5,30],[12,33,5,33],[12,42,5,6,"uint8ArrayUtf8ByteString"],[12,66,5,33],[12,67,5,34,"array"],[12,72,5,33],[12,74,5,41,"start"],[12,79,5,33],[12,81,5,48,"end"],[12,84,5,33],[12,86,5,56],[13,0,6,1],[13,11,6,8,"String"],[13,17,6,14],[13,18,6,15,"fromCharCode"],[13,30,6,8],[13,37,6,8,"String"],[13,43,6,14],[13,64,6,31,"array"],[13,69,6,36],[13,70,6,37,"slice"],[13,75,6,31],[13,76,6,43,"start"],[13,81,6,31],[13,83,6,50,"end"],[13,86,6,31],[13,87,6,14],[13,89,6,1],[14,0,7,1],[14,3,5,0],[16,0,9,0,"exports"],[16,2,9,0,"exports"],[16,9,9,7],[16,10,9,8,"readUInt64LE"],[16,22,9,0],[16,25,9,23],[16,35,9,24,"buffer"],[16,41,9,23],[16,43,9,47],[17,0,9,47],[17,8,9,32,"offset"],[17,14,9,47],[17,85,9,41],[17,86,9,47],[18,0,10,1],[18,8,10,5,"n"],[18,9,10,6],[18,12,10,9,"buffer"],[18,18,10,15],[18,19,10,16,"offset"],[18,25,10,15],[18,26,10,1],[19,0,11,1],[19,8,11,5,"mul"],[19,11,11,8],[19,14,11,11],[19,15,11,1],[20,0,12,1],[20,8,12,5,"i"],[20,9,12,6],[20,12,12,9],[20,13,12,1],[22,0,14,1],[22,11,14,8],[22,13,14,10,"i"],[22,14,14,8],[22,17,14,14],[22,18,14,1],[22,20,14,17],[23,0,15,2,"mul"],[23,6,15,2,"mul"],[23,9,15,5],[23,13,15,9],[23,18,15,2],[24,0,16,2,"n"],[24,6,16,2,"n"],[24,7,16,3],[24,11,16,7,"buffer"],[24,17,16,13],[24,18,16,14,"offset"],[24,24,16,20],[24,27,16,23,"i"],[24,28,16,13],[24,29,16,7],[24,32,16,28,"mul"],[24,35,16,2],[25,0,17,2],[27,0,19,1],[27,11,19,8,"n"],[27,12,19,1],[28,0,20,1],[28,3,9,0],[30,0,22,0,"exports"],[30,2,22,0,"exports"],[30,9,22,7],[30,10,22,8,"tarHeaderChecksumMatches"],[30,34,22,0],[30,37,22,35],[30,47,22,35,"buffer"],[30,53,22,41],[30,55,22,45],[31,0,23,1],[31,8,23,5,"buffer"],[31,14,23,11],[31,15,23,12,"length"],[31,21,23,5],[31,24,23,21],[31,27,23,1],[31,29,23,26],[32,0,24,2],[32,13,24,9],[32,18,24,2],[33,0,25,2],[35,0,27,1],[35,8,27,7,"MASK_8TH_BIT"],[35,20,27,19],[35,23,27,22],[35,27,27,1],[36,0,29,1],[36,8,29,5,"sum"],[36,11,29,8],[36,14,29,11],[36,17,29,1],[37,0,30,1],[37,8,30,5,"signedBitSum"],[37,20,30,17],[37,23,30,20],[37,24,30,1],[39,0,32,1],[39,9,32,6],[39,13,32,10,"i"],[39,14,32,11],[39,17,32,14],[39,18,32,1],[39,20,32,17,"i"],[39,21,32,18],[39,24,32,21],[39,27,32,1],[39,29,32,26,"i"],[39,30,32,27],[39,32,32,1],[39,34,32,31],[40,0,33,2],[40,10,33,8,"byte"],[40,14,33,12],[40,17,33,15,"buffer"],[40,23,33,21],[40,24,33,22,"i"],[40,25,33,21],[40,26,33,2],[41,0,34,2,"sum"],[41,6,34,2,"sum"],[41,9,34,5],[41,13,34,9,"byte"],[41,17,34,2],[42,0,35,2,"signedBitSum"],[42,6,35,2,"signedBitSum"],[42,18,35,14],[42,22,35,18,"byte"],[42,26,35,22],[42,29,35,25,"MASK_8TH_BIT"],[42,41,35,2],[43,0,36,2],[45,0,40,1],[45,9,40,6],[45,13,40,10,"i"],[45,15,40,11],[45,18,40,14],[45,21,40,1],[45,23,40,19,"i"],[45,25,40,20],[45,28,40,23],[45,31,40,1],[45,33,40,28,"i"],[45,35,40,29],[45,37,40,1],[45,39,40,33],[46,0,41,2],[46,10,41,8,"byte"],[46,15,41,12],[46,18,41,15,"buffer"],[46,24,41,21],[46,25,41,22,"i"],[46,27,41,21],[46,28,41,2],[47,0,42,2,"sum"],[47,6,42,2,"sum"],[47,9,42,5],[47,13,42,9,"byte"],[47,18,42,2],[48,0,43,2,"signedBitSum"],[48,6,43,2,"signedBitSum"],[48,18,43,14],[48,22,43,18,"byte"],[48,27,43,22],[48,30,43,25,"MASK_8TH_BIT"],[48,42,43,2],[49,0,44,2],[51,0,46,1],[51,8,46,7,"readSum"],[51,15,46,14],[51,18,46,17,"parseInt"],[51,26,46,25],[51,27,46,26,"uint8ArrayUtf8ByteString"],[51,51,46,50],[51,52,46,51,"buffer"],[51,58,46,50],[51,60,46,59],[51,63,46,50],[51,65,46,64],[51,68,46,50],[51,69,46,25],[51,71,46,70],[51,72,46,25],[51,73,46,1],[52,0,49,1],[52,11,51,2,"readSum"],[52,18,51,9],[52,23,51,14,"sum"],[52,26,51,2],[52,30,54,2,"readSum"],[52,37,54,9],[52,42,54,15,"sum"],[52,45,54,18],[52,49,54,22,"signedBitSum"],[52,61,54,34],[52,65,54,38],[52,66,54,18],[52,67,49,1],[53,0,56,1],[53,3,22,0],[55,0,58,0,"exports"],[55,2,58,0,"exports"],[55,9,58,7],[55,10,58,8,"multiByteIndexOf"],[55,26,58,0],[55,29,58,27],[55,39,58,28,"buffer"],[55,45,58,27],[55,47,58,36,"bytesToSearch"],[55,60,58,27],[55,62,58,67],[56,0,58,67],[56,8,58,51,"startAt"],[56,15,58,67],[56,86,58,61],[56,87,58,67],[58,0,60,1],[58,8,60,5,"Buffer"],[58,14,60,11],[58,18,60,15,"Buffer"],[58,24,60,21],[58,25,60,22,"isBuffer"],[58,33,60,15],[58,34,60,31,"buffer"],[58,40,60,15],[58,41,60,1],[58,43,60,40],[59,0,61,2],[59,13,61,9,"buffer"],[59,19,61,15],[59,20,61,16,"indexOf"],[59,27,61,9],[59,28,61,24,"Buffer"],[59,34,61,30],[59,35,61,31,"from"],[59,39,61,24],[59,40,61,36,"bytesToSearch"],[59,53,61,24],[59,54,61,9],[59,56,61,52,"startAt"],[59,63,61,9],[59,64,61,2],[60,0,62,2],[62,0,64,1],[62,8,64,7,"nextBytesMatch"],[62,22,64,21],[62,25,64,24],[62,34,64,7,"nextBytesMatch"],[62,48,64,24],[62,49,64,25,"buffer"],[62,55,64,24],[62,57,64,33,"bytes"],[62,62,64,24],[62,64,64,40,"startIndex"],[62,74,64,24],[62,76,64,55],[63,0,65,2],[63,11,65,7],[63,15,65,11,"i"],[63,16,65,12],[63,19,65,15],[63,20,65,2],[63,22,65,18,"i"],[63,23,65,19],[63,26,65,22,"bytes"],[63,31,65,27],[63,32,65,28,"length"],[63,38,65,2],[63,40,65,36,"i"],[63,41,65,37],[63,43,65,2],[63,45,65,41],[64,0,66,3],[64,12,66,7,"bytes"],[64,17,66,12],[64,18,66,13,"i"],[64,19,66,12],[64,20,66,7],[64,25,66,20,"buffer"],[64,31,66,26],[64,32,66,27,"startIndex"],[64,42,66,37],[64,45,66,40,"i"],[64,46,66,26],[64,47,66,3],[64,49,66,44],[65,0,67,4],[65,17,67,11],[65,22,67,4],[66,0,68,4],[67,0,69,3],[69,0,71,2],[69,13,71,9],[69,17,71,2],[70,0,72,2],[70,5,64,1],[72,0,75,1],[72,8,75,5,"index"],[72,13,75,10],[72,16,75,13,"buffer"],[72,22,75,19],[72,23,75,20,"indexOf"],[72,30,75,13],[72,31,75,28,"bytesToSearch"],[72,44,75,41],[72,45,75,42],[72,46,75,41],[72,47,75,13],[72,49,75,46,"startAt"],[72,56,75,13],[72,57,75,1],[74,0,76,1],[74,11,76,8,"index"],[74,16,76,13],[74,20,76,17],[74,21,76,1],[74,23,76,20],[75,0,77,2],[75,10,77,6,"nextBytesMatch"],[75,24,77,20],[75,25,77,21,"buffer"],[75,31,77,20],[75,33,77,29,"bytesToSearch"],[75,46,77,20],[75,48,77,44,"index"],[75,53,77,20],[75,54,77,2],[75,56,77,52],[76,0,78,3],[76,15,78,10,"index"],[76,20,78,3],[77,0,79,3],[79,0,81,2,"index"],[79,6,81,2,"index"],[79,11,81,7],[79,14,81,10,"buffer"],[79,20,81,16],[79,21,81,17,"indexOf"],[79,28,81,10],[79,29,81,25,"bytesToSearch"],[79,42,81,38],[79,43,81,39],[79,44,81,38],[79,45,81,10],[79,47,81,43,"index"],[79,52,81,48],[79,55,81,51],[79,56,81,10],[79,57,81,2],[80,0,82,2],[82,0,84,1],[82,11,84,8],[82,12,84,9],[82,13,84,1],[83,0,85,1],[83,3,58,0],[85,0,87,0,"exports"],[85,2,87,0,"exports"],[85,9,87,7],[85,10,87,8,"uint8ArrayUtf8ByteString"],[85,34,87,0],[85,37,87,35,"uint8ArrayUtf8ByteString"],[85,61,87,0]],"functionMap":{"names":["<global>","exports.stringToBytes","map$argument_0","uint8ArrayUtf8ByteString","exports.readUInt64LE","exports.tarHeaderChecksumMatches","exports.multiByteIndexOf","nextBytesMatch"],"mappings":"AAA;wBCE,0BC,oCD,CD;iCGE;CHE;uBIE;CJW;mCKE;CLkC;2BME;wBCM;EDQ;CNa"}},"type":"js/module"}]}